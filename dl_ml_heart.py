# -*- coding: utf-8 -*-
"""DL_ML_HEART.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kXsZR3LbjwvHt3f500aiNm2YwljM7NJd

    Prediction of Heart Attack Using Machine Learning Algos and Deep Learning
---
###Deep Learning:
"""

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
# Importing necessary modules
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt
# Keras specific
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

df = pd.read_csv("lungcancer.csv")
x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.34,random_state=42)
model = Sequential()
model.add(Dense(570, activation='relu', input_dim=15))
model.add(Dense(150, activation='relu'))
model.add(Dense(80, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compiling the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(x_train,y_train, epochs=45)
print(model.predict(x_test))
loss, accuracy = model.evaluate(x_test, y_test)
# print("Accuracy =", accuracy, ", Loss =", loss)

#Accuracy was found to be 98.6%

"""---
###Machine Learning:
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df = pd.read_csv("heart.csv")

#DECISION TREE
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

x = df.drop('target', axis=1)
y = df['target']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)
dt_model = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
dt_model.fit(x_train, y_train)
dt_predictions = dt_model.predict(x_test)
dt_accuracy = accuracy_score(y_test, dt_predictions)
print("Decision Tree Accuracy:", dt_accuracy)

#RANDOM FOREST
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier

x = df.drop('target', axis=1)
y = df['target']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

# Random Forest
rf_model = RandomForestClassifier()
rf_model.fit(x_train, y_train)
rf_predictions = rf_model.predict(x_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)
print("Random Forest Accuracy:", rf_accuracy)

#SVM
from sklearn.svm import SVC

x = df.drop('target', axis=1)
y = df['target']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

svm_model = SVC(kernel = 'linear', random_state = 0)
svm_model.fit(x_train, y_train)
svm_predictions = svm_model.predict(x_test)
svm_accuracy = accuracy_score(y_test, svm_predictions)
print("SVM Accuracy:", svm_accuracy)

#KNN
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

x = df.drop('target', axis=1)
y = df['target']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)

knn_model = KNeighborsClassifier(n_neighbors=3, metric='minkowski', p=2)
knn_model.fit(x_train, y_train)
knn_predictions = knn_model.predict(x_test)
knn_accuracy = accuracy_score(y_test, knn_predictions)
print("KNN Accuracy:", knn_accuracy)

#NAIVE BAYES
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

df.head()
x = df.drop("target", axis=1)
y = df["target"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.35,random_state=0)
nb_model=GaussianNB()
nb_model.fit(x_train,y_train)
nb_predictions = nb_model.predict(x_test)
nb_accuracy = accuracy_score(y_test, nb_predictions)
print("Naive Bayes Accuracy:", nb_accuracy)

#LOGISTIC REGRESSION - EXPERIMENTATION
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

x = df.drop('target', axis=1)
y = df['target']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=0)

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
lr_predictions = lr_model.predict(x_test)
lr_accuracy = accuracy_score(y_test, lr_predictions)
print("Logistic Regression Accuracy:", lr_accuracy)